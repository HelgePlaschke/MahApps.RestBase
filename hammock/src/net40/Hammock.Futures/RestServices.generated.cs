

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Hammock;
using Hammock.Model;
using Hammock.Web;
using Hammock.Authentication;
using Hammock.Serialization;
using Hammock.Authentication.Basic;
using Hammock.Authentication.OAuth;

using Twitter.Model;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Hammock.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning restore 1591



namespace Twitter
{
	/// <summary>
	/// Provides an extendable JSON.NET-based serializer for <see cref="TwitterService"/>.
	/// </summary>
	public partial class TwitterServiceSerializer : ISerializer, IDeserializer
	{
		private readonly JsonSerializer _serializer;

		public TwitterServiceSerializer() : this(new JsonSerializerSettings
                               {
                                   MissingMemberHandling = MissingMemberHandling.Ignore,
                                   NullValueHandling = NullValueHandling.Include,
                                   DefaultValueHandling = DefaultValueHandling.Include
                               })
		{
			
		}

        public TwitterServiceSerializer(JsonSerializerSettings settings)
        {
            _serializer = new JsonSerializer
                              {
                                  ConstructorHandling = settings.ConstructorHandling,
                                  ContractResolver = settings.ContractResolver,
                                  ObjectCreationHandling = settings.ObjectCreationHandling,
                                  MissingMemberHandling = settings.MissingMemberHandling,
                                  DefaultValueHandling = settings.DefaultValueHandling,
                                  NullValueHandling = settings.NullValueHandling
                              };

            foreach (var converter in settings.Converters)
            {
                _serializer.Converters.Add(converter);
            }
        }

        #region IDeserializer Members

        public virtual object Deserialize(string content, Type type)
        {
            using (var stringReader = new StringReader(content))
            {
                using (var jsonTextReader = new JsonTextReader(stringReader))
                {
                    return _serializer.Deserialize(jsonTextReader, type);
                }
            }
        }

        public virtual T Deserialize<T>(string content)
        {
            using (var stringReader = new StringReader(content))
            {
                using (var jsonTextReader = new JsonTextReader(stringReader))
                {
                    return _serializer.Deserialize<T>(jsonTextReader);
                }
            }
        }

        #endregion

        #region ISerializer Members

        public virtual string Serialize(object instance, Type type)
        {
            using (var stringWriter = new StringWriter())
            {
                using (var jsonTextWriter = new JsonTextWriter(stringWriter))
                {
                    jsonTextWriter.Formatting = Formatting.Indented;
                    jsonTextWriter.QuoteChar = '"';

                    _serializer.Serialize(jsonTextWriter, instance);

                    var result = stringWriter.ToString();
                    return result;
                }
            }
        }

        public virtual string ContentType
        {
            get { return "application/json"; }
        }
		
		public virtual Encoding ContentEncoding
        {
            get { return Encoding.UTF8; }
        }

        #endregion
	}
}

namespace Twitter
{
	/// <summary>
	/// An API wrapper for Twitter, generated by Hammock.
	/// </summary>
  	public partial class TwitterService
  	{
		private static RestClient _client;
	
		public virtual ISerializer Serializer
		{
			get
			{
				return _client.Serializer;
			}		
			set
			{
				_client.Serializer = value;
			}
		}
		
		public virtual IDeserializer Deserializer
		{
			get
			{
				return _client.Deserializer;
			}		
			set
			{
				_client.Deserializer = value;
			}
		}
	
		/// <summary>
        /// Instantiates a new TwitterService for REST operations.
        /// </summary>
    	public TwitterService()
		{
			_client = new RestClient();
			_client.UserAgent = "Hammock";
			_client.Authority = "https://api.twitter.com/";
			
			var serializer = new TwitterServiceSerializer();
			_client.Serializer = serializer;
			_client.Deserializer = serializer;			
		}
		
		/// <summary>
		/// Sets the service credentials to use a custom <see cref="ICredentials"/> instance.
		/// </summary>
		/// <param name="credentials">The custom credentials.</param>
		public virtual void AuthenticateUsing(IWebCredentials credentials)
		{
			_client.Credentials = credentials;
		}
			
		/// <summary>
		/// Sets the service credentials to use a Basic username and password
		/// when accessing a protected resource. The username and password 
		/// is sent in the HTTP Authorization header as plain text and is not
		/// protected unless sent over HTTPS.
		/// </summary>
		/// <param name="token">The OAuth token</param>
		/// <param name="tokenSecret">The OAuth token secret</param>
		public void AuthenticateAs(string username, string password)
		{
			var credentials = new BasicAuthCredentials();
			credentials.Username = username;
			credentials.Password = password;
			
			_client.Credentials = credentials;			
		}
   			
	
		/// <summary>
        /// Gets or sets the client OAuth consumer key.
        /// </summary>
		public virtual string ConsumerKey { get; set; }
		
		/// <summary>
        /// Gets or sets the client OAuth consumer secret.
		/// This is used to sign OAuth requests.
        /// </summary>
		public virtual string ConsumerSecret { get; set; }
		
		/// <summary>
        /// Instantiates a new TwitterService for REST operations.
        /// </summary>
        /// <param name="consumerKey">The client's OAuth Consumer Key</param>
        /// <param name="consumerSecret">The client's OAuth Consumer Secret</param>
		public TwitterService(string consumerKey, string consumerSecret)
		{
			_client = new RestClient();
			_client.UserAgent = "Hammock";
			_client.Authority = "https://api.twitter.com/";
			
			ConsumerKey = consumerKey;
			ConsumerSecret = consumerSecret;
		}	
		
		/// <summary>
		/// Sets the service credentials to use an OAuth token and token secret 
		/// when accessing a protected resource.
		/// </summary>
		/// <param name="token">The OAuth token</param>
		/// <param name="tokenSecret">The OAuth token secret</param>
		public virtual void AuthenticateWith(string token, string tokenSecret)
		{
			var credentials = new OAuthCredentials();
			credentials.ConsumerKey = ConsumerKey;
			credentials.ConsumerSecret = ConsumerSecret;
			credentials.Type = OAuthType.ProtectedResource;
			credentials.ParameterHandling = OAuthParameterHandling.HttpAuthorizationHeader;
			credentials.SignatureMethod = OAuthSignatureMethod.HmacSha1;
			credentials.Token = token;
			credentials.TokenSecret = tokenSecret;
			
			_client.Credentials = credentials;			
		}
   					
		private StatusesRoute _Statuses;
		/// <summary>
		/// Provides access to the REST route 'statuses'.
		///	</summary>
		public StatusesRoute Statuses
		{ 
			get
			{
				return (_Statuses ?? new StatusesRoute(_client));
			}
			set
			{
				_Statuses = value;
			}
		}
		
		/// <summary>
		/// Provides access to the REST route 'statuses'.
		///	</summary>
		public class StatusesRoute
		{
			private RestClient _client;
			
			internal StatusesRoute(RestClient client)
			{
				_client = client;
			}
				
#if !SILVERLIGHT
			/// <summary>
			/// Gets results from '/statuses/public_timeline.json'.
			/// </summary>
			/// 			
			/// <returns>			
			/// A <see cref="IEnumerable<TwitterStatus>" /> representing the results from '/statuses/public_timeline.json'.			
			/// </returns>
			public virtual IEnumerable<TwitterStatus> PublicTimeline()
			{
				var request = new RestRequest();
				request.Method = WebMethod.Get;
				request.Path = "/statuses/public_timeline.json";
				
								
				var response = _client.Request(request);
				
				var result = JsonConvert.DeserializeObject<IEnumerable<TwitterStatus>>(response.Content);
				
				return result;
			}
			#endif
			/// <summary>
			/// Gets results asynchronously from '/statuses/public_timeline.json'.
			/// </summary>
#if WindowsPhone
			public virtual void BeginPublicTimeline()
#else
			/// <returns>
			/// An <see cref="System.IAsyncResult" /> for the pending asynchronous operation.
			/// </returns>
			public virtual IAsyncResult BeginPublicTimeline()
#endif
			{
				var request = new RestRequest();
				request.Method = WebMethod.Get;
				request.Path = "/statuses/public_timeline.json";
				
				return _client.BeginRequest(request);
			}	
			
#if !WindowsPhone
			/// <summary>
			/// Completes an asynchronous request from '/statuses/public_timeline.json'.
			/// </summary>
			/// <returns>
			/// <see cref="IEnumerable<TwitterStatus>" /> representing the results from '/statuses/public_timeline.json'.
			/// </returns>
			public virtual IEnumerable<TwitterStatus> EndPublicTimeline(IAsyncResult result)
			{
				var request = new RestRequest();
				request.Method = WebMethod.Get;
				request.Path = "/statuses/public_timeline.json";
				
				var response = _client.EndRequest(result);
			  
			  	var model = JsonConvert.DeserializeObject<IEnumerable<TwitterStatus>>(response.Content);
				
			    return model;
			}
#endif
	
#if !SILVERLIGHT
			/// <summary>
			/// Posts results from '/statuses/update.json'.
			/// </summary>
			/// <param name="status">A required parameter.</param>			
			/// <returns>			
			/// A <see cref="TwitterStatus" /> representing the results from '/statuses/update.json'.			
			/// </returns>
			public virtual TwitterStatus Tweet(string status)
			{
				var request = new RestRequest();
				request.Method = WebMethod.Post;
				request.Path = "/statuses/update.json";
				
				request.AddParameter("status", status);		
								
				var response = _client.Request(request);
				
				var result = JsonConvert.DeserializeObject<TwitterStatus>(response.Content);
				
				return result;
			}
						
			/// <summary>
			/// Posts results from '/statuses/update.json'.
			/// </summary>
			/// <param name="status">A required parameter.</param>			
			/// <param name="source">An optional parameter.</param>			
			/// <returns>
			/// A <see cref="TwitterStatus" /> representing the results from '/statuses/update.json'.
			/// </returns>
			public virtual TwitterStatus Tweet(string status, string source) 
			{
				var request = new RestRequest();
				request.Method = WebMethod.Post;
				request.Path = "/statuses/update.json";
				request.AddParameter("status", status);		
				request.AddParameter("source", source);		
								
				var response = _client.Request(request);				
				var result = JsonConvert.DeserializeObject<TwitterStatus>(response.Content);
				
				return result;
			}
			#endif
			/// <summary>
			/// Posts results asynchronously from '/statuses/update.json'.
			/// </summary>
#if WindowsPhone
			public virtual void BeginTweet(string status)
#else
			/// <returns>
			/// An <see cref="System.IAsyncResult" /> for the pending asynchronous operation.
			/// </returns>
			public virtual IAsyncResult BeginTweet(string status)
#endif
			{
				var request = new RestRequest();
				request.Method = WebMethod.Post;
				request.Path = "/statuses/update.json";
				
				return _client.BeginRequest(request);
			}	
			
#if !WindowsPhone
			/// <summary>
			/// Completes an asynchronous request from '/statuses/update.json'.
			/// </summary>
			/// <returns>
			/// <see cref="TwitterStatus" /> representing the results from '/statuses/update.json'.
			/// </returns>
			public virtual TwitterStatus EndTweet(IAsyncResult result)
			{
				var request = new RestRequest();
				request.Method = WebMethod.Post;
				request.Path = "/statuses/update.json";
				
				var response = _client.EndRequest(result);
			  
			  	var model = JsonConvert.DeserializeObject<TwitterStatus>(response.Content);
				
			    return model;
			}
#endif
 }
			}
}
