<#@ assembly Name="System.Core, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly Name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly Name="System.Xml.dll" #>
<#@ assembly Name="System.Xml.Linq.dll" #>
<#@ assembly Name="D:\Projects\FxCop\FxCopSdk.dll" #>
<#@ assembly Name="D:\Projects\FxCop\Microsoft.Cci.dll" #>
<#@ assembly Name="D:\Projects\hammock\lib\Newtonsoft.Json.dll" #>
<#@ assembly Name="D:\Projects\hammock\bin\net40\Hammock.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Microsoft.FxCop.Sdk" #>
<#@ template hostspecific="true" debug="true" #>
<#@ output extension=".generated.cs" #>
<#@ include file="RestGen.ttinclude" #>

<# 
var options = new {
	ServiceDefinitionFile = Host.TemplateFile.Replace(".tt",".json"), // RestService.json
	GenerateDtos = false, // Will generate IPropertyNotifyChanged and DataMembers for your classes
};

var assemblyPath = Host.ResolveAssemblyReference("$(TargetPath)");
AssemblyNode assembly = AssemblyNode.GetAssembly(assemblyPath);

string json = System.IO.File.ReadAllText( 
	options.ServiceDefinitionFile
);

List<ServiceDefinition> defs = JsonConvert.DeserializeObject<List<ServiceDefinition>>(json);
#>
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Hammock;
using Hammock.Model;
using Hammock.Web;
using Hammock.Authentication;
using Hammock.Serialization;
using Hammock.Authentication.Basic;
using Hammock.Authentication.OAuth;

<# foreach(ServiceDefinition def in defs) { 
	var modelNamespace = options.GenerateDtos ? def.ModelNamespace + ".DataAccess" : def.ModelNamespace;
	#>
using <#= modelNamespace #>;
<# } #>

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Hammock.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning restore 1591

<# foreach(ServiceDefinition def in defs) { 
var modelNamespace = options.GenerateDtos ? def.ModelNamespace + ".DataAccess" : def.ModelNamespace; 
#>

<# if(options.GenerateDtos) { #>
namespace <#= modelNamespace #>
{	<# foreach(var modelClass in def.YieldModelClasses().Distinct()) { #>

#if !SILVERLIGHT
	[Serializable]
#endif
	public partial class <#= modelClass #> : PropertyChangedBase
	{	<# TypeNode type = assembly.GetType(
				Identifier.For(def.ModelNamespace),
    			Identifier.For(modelClass)
			); 
			foreach(Member member in type.Members) {
				if(!(member is PropertyNode)) continue;
				var property = (PropertyNode)member; #>
		
		private <#= property.Type.Name #> _<#= property.Name #>;
#if !Smartphone
		[DataMember]
#endif
		public virtual <#= property.Type.Name #> <#= property.Name #>
		{
			get
			{
				return _<#= property.Name #>;
			}
			set
			{
				if (_<#= property.Name #> == value)
                {
                    return;
                }

                _<#= property.Name #> = value;
                OnPropertyChanged("<#= property.Name #>");
			}
		}<# } #>

	}
<# } #>
}
<# } #>

namespace <#= def.Namespace #>
{
	/// <summary>
	/// Provides an extendable JSON.NET-based serializer for <see cref="<#= def.Name #>"/>.
	/// </summary>
	public partial class <#= def.Name #>Serializer : ISerializer, IDeserializer
	{
		private readonly JsonSerializer _serializer;

		public <#= def.Name #>Serializer() : this(new JsonSerializerSettings
                               {
                                   MissingMemberHandling = MissingMemberHandling.Ignore,
                                   NullValueHandling = NullValueHandling.Include,
                                   DefaultValueHandling = DefaultValueHandling.Include
                               })
		{
			
		}

        public <#= def.Name #>Serializer(JsonSerializerSettings settings)
        {
            _serializer = new JsonSerializer
                              {
                                  ConstructorHandling = settings.ConstructorHandling,
                                  ContractResolver = settings.ContractResolver,
                                  ObjectCreationHandling = settings.ObjectCreationHandling,
                                  MissingMemberHandling = settings.MissingMemberHandling,
                                  DefaultValueHandling = settings.DefaultValueHandling,
                                  NullValueHandling = settings.NullValueHandling
                              };

            foreach (var converter in settings.Converters)
            {
                _serializer.Converters.Add(converter);
            }
        }

        #region IDeserializer Members

        public virtual object Deserialize(string content, Type type)
        {
            using (var stringReader = new StringReader(content))
            {
                using (var jsonTextReader = new JsonTextReader(stringReader))
                {
                    return _serializer.Deserialize(jsonTextReader, type);
                }
            }
        }

        public virtual T Deserialize<T>(string content)
        {
            using (var stringReader = new StringReader(content))
            {
                using (var jsonTextReader = new JsonTextReader(stringReader))
                {
                    return _serializer.Deserialize<T>(jsonTextReader);
                }
            }
        }

        #endregion

        #region ISerializer Members

        public virtual string Serialize(object instance, Type type)
        {
            using (var stringWriter = new StringWriter())
            {
                using (var jsonTextWriter = new JsonTextWriter(stringWriter))
                {
                    jsonTextWriter.Formatting = Formatting.Indented;
                    jsonTextWriter.QuoteChar = '"';

                    _serializer.Serialize(jsonTextWriter, instance);

                    var result = stringWriter.ToString();
                    return result;
                }
            }
        }

        public virtual string ContentType
        {
            get { return "application/json"; }
        }
		
		public virtual Encoding ContentEncoding
        {
            get { return Encoding.UTF8; }
        }

        #endregion
	}
}

namespace <#= def.Namespace #>
{
	/// <summary>
	/// <#= def.Description #>
	/// </summary>
  	public partial class <#= def.Name #>
  	{
		private static RestClient _client;
	
		public virtual ISerializer Serializer
		{
			get
			{
				return _client.Serializer;
			}		
			set
			{
				_client.Serializer = value;
			}
		}
		
		public virtual IDeserializer Deserializer
		{
			get
			{
				return _client.Deserializer;
			}		
			set
			{
				_client.Deserializer = value;
			}
		}
	
		/// <summary>
        /// Instantiates a new <#= def.Name #> for REST operations.
        /// </summary>
    	public <#= def.Name #>()
		{
			_client = new RestClient();
			_client.UserAgent = "<#= def.UserAgent ?? "Hammock" #>";
			_client.Authority = "<#= def.Authority #>";
			
			var serializer = new <#= def.Name #>Serializer();
			_client.Serializer = serializer;
			_client.Deserializer = serializer;			
		}
		
		/// <summary>
		/// Sets the service credentials to use a custom <see cref="ICredentials"/> instance.
		/// </summary>
		/// <param name="credentials">The custom credentials.</param>
		public virtual void AuthenticateUsing(IWebCredentials credentials)
		{
			_client.Credentials = credentials;
		}
		<# if (def.UsesBasicAuth) { #>	
		/// <summary>
		/// Sets the service credentials to use a Basic username and password
		/// when accessing a protected resource. The username and password 
		/// is sent in the HTTP Authorization header as plain text and is not
		/// protected unless sent over HTTPS.
		/// </summary>
		/// <param name="token">The OAuth token</param>
		/// <param name="tokenSecret">The OAuth token secret</param>
		public void AuthenticateAs(string username, string password)
		{
			var credentials = new BasicAuthCredentials();
			credentials.Username = username;
			credentials.Password = password;
			
			_client.Credentials = credentials;			
		}
   	<# } #>
	<# if (def.UsesOAuth) { #>	
	
		/// <summary>
        /// Gets or sets the client OAuth consumer key.
        /// </summary>
		public virtual string ConsumerKey { get; set; }
		
		/// <summary>
        /// Gets or sets the client OAuth consumer secret.
		/// This is used to sign OAuth requests.
        /// </summary>
		public virtual string ConsumerSecret { get; set; }
		
		/// <summary>
        /// Instantiates a new <#= def.Name #> for REST operations.
        /// </summary>
        /// <param name="consumerKey">The client's OAuth Consumer Key</param>
        /// <param name="consumerSecret">The client's OAuth Consumer Secret</param>
		public <#= def.Name #>(string consumerKey, string consumerSecret)
		{
			_client = new RestClient();
			_client.UserAgent = "<#= def.UserAgent ?? "Hammock" #>";
			_client.Authority = "<#= def.Authority #>";
			
			ConsumerKey = consumerKey;
			ConsumerSecret = consumerSecret;
		}	
		
		/// <summary>
		/// Sets the service credentials to use an OAuth token and token secret 
		/// when accessing a protected resource.
		/// </summary>
		/// <param name="token">The OAuth token</param>
		/// <param name="tokenSecret">The OAuth token secret</param>
		public virtual void AuthenticateWith(string token, string tokenSecret)
		{
			var credentials = new OAuthCredentials();
			credentials.ConsumerKey = ConsumerKey;
			credentials.ConsumerSecret = ConsumerSecret;
			credentials.Type = OAuthType.ProtectedResource;
			credentials.ParameterHandling = OAuthParameterHandling.HttpAuthorizationHeader;
			credentials.SignatureMethod = OAuthSignatureMethod.HmacSha1;
			credentials.Token = token;
			credentials.TokenSecret = tokenSecret;
			
			_client.Credentials = credentials;			
		}
   	<# } #>
	<# 	
		IEnumerable<string> segments = def.Segments != null ? def.Segments : new List<string>();
		foreach(string segment in segments.Distinct())
		{
			if(segment.Equals("/")) continue;
			if(!segment.EndsWith("/")) continue;
			
			string resource = segment.Substring(0, segment.Length - 1); 
			string routeName = Utilities.PascalCase(resource);
			string routeClassName = string.Concat(routeName, "Route"); #>
			
		private <#= routeClassName #> _<#= routeName #>;
		/// <summary>
		/// Provides access to the REST route '<#= resource #>'.
		///	</summary>
		public <#= routeClassName #> <#= routeName #>
		{ 
			get
			{
				return (_<#= routeName #> ?? new <#= routeClassName #>(_client));
			}
			set
			{
				_<#= routeName #> = value;
			}
		}
		
		/// <summary>
		/// Provides access to the REST route '<#= resource #>'.
		///	</summary>
		public class <#= routeClassName #>
		{
			private RestClient _client;
			
			internal <#= routeClassName #>(RestClient client)
			{
				_client = client;
			}
			<# foreach(Endpoint endpoint in def.Endpoints)
			{
				var methods = endpoint.YieldWebMethods();
				
				foreach(var method in methods)
				{
					var prefix = methods.Count() > 1 ? method.ToString() : "";
					
					string methodName;
					if(!string.IsNullOrWhiteSpace(endpoint.FriendlyName))
					{
						methodName = endpoint.FriendlyName;
					}
					else
					{
						var last = endpoint.Path
							.Replace(segment, "").Replace("/", "")
							.Replace(".json", "");
						
						if(last.Contains("_"))
						{
							var sb = new StringBuilder();
							var words = last.Split(new [] {"_"}, StringSplitOptions.RemoveEmptyEntries);
							foreach(var word in words)
							{
								sb.Append(Utilities.PascalCase(word));
							}
							methodName = sb.ToString();
						}
						else
						{
							methodName = string.Concat(prefix, Utilities.PascalCase(last)); 
						}					
					}
					
					var required = new StringBuilder();
					var parameters = endpoint.YieldParameters();
					foreach(Parameter parameter in parameters)
					{
						if(!parameter.IsRequired) continue;
						required.Append(parameter.Type).Append(" ");
						required.Append(parameter.Name);												
					}
					var optional = new StringBuilder();
					foreach(Parameter parameter in parameters)
					{
						if(parameter.IsRequired) continue;
						optional.Append(parameter.Type).Append(" ");
						optional.Append(parameter.Name);												
					}
					#>	
#if !SILVERLIGHT
			/// <summary>
			/// <#= method.ToString() + "s" #> results from '<#= endpoint.Path #>'.
			/// </summary>
			/// <# foreach(Parameter parameter in parameters) { if(!parameter.IsRequired) continue; #><param name="<#=parameter.Name#>">A required parameter.</param><# } #>
			
			/// <returns>			
			/// A <see cref="<#= endpoint.Model #>" /> representing the results from '<#= endpoint.Path #>'.			
			/// </returns>
			public virtual <#= endpoint.Model #> <#= methodName #>(<#= required.ToString() #>)
			{
				var request = new RestRequest();
				request.Method = WebMethod.<#= method #>;
				request.Path = "<#= endpoint.Path #>";
				
				<# foreach(Parameter parameter in parameters) { if(!parameter.IsRequired) continue; #>request.AddParameter("<#= parameter.Name #>", <#= parameter.Name #>);		
				<# } #>
				
				var response = _client.Request(request);
				
				var result = JsonConvert.DeserializeObject<<#= endpoint.Model#>>(response.Content);
				
				return result;
			}
			<# if(parameters.Where(p => !p.IsRequired).Count() > 0) { #>
			
			/// <summary>
			/// <#= method.ToString() + "s" #> results from '<#= endpoint.Path #>'.
			/// </summary>
			<# if(parameters.Where(p => p.IsRequired).Count() > 0) { #>/// <# foreach(Parameter parameter in parameters) { if(!parameter.IsRequired) continue; #><param name="<#=parameter.Name#>">A required parameter.</param><# } #><# } #>
			
			<# if(parameters.Where(p => !p.IsRequired).Count() > 0) { #>/// <# foreach(Parameter parameter in parameters) { if(parameter.IsRequired) continue; #><param name="<#=parameter.Name#>">An optional parameter.</param><# } #><# } #>
			
			/// <returns>
			/// A <see cref="<#= endpoint.Model #>" /> representing the results from '<#= endpoint.Path #>'.
			/// </returns>
			public virtual <#= endpoint.Model #> <#= methodName #>(<#= required.Length > 0 ? required.ToString() : "" #><#= optional.Length > 0 ? ", " + optional.ToString() : "" #>) 
			{
				var request = new RestRequest();
				request.Method = WebMethod.<#= method #>;
				request.Path = "<#= endpoint.Path #>";
				<# foreach(Parameter parameter in parameters) { if(!parameter.IsRequired) continue; #>request.AddParameter("<#= parameter.Name #>", <#= parameter.Name #>);		
				<# } #><# foreach(Parameter parameter in parameters) { if(parameter.IsRequired) continue; #>request.AddParameter("<#= parameter.Name #>", <#= parameter.Name #>);		
				<# } #>
				
				var response = _client.Request(request);				
				var result = JsonConvert.DeserializeObject<<#= endpoint.Model#>>(response.Content);
				
				return result;
			}
			<# } #>
#endif
			/// <summary>
			/// <#= method.ToString() + "s" #> results asynchronously from '<#= endpoint.Path #>'.
			/// </summary>
#if WindowsPhone
			public virtual void Begin<#= methodName #>(<#= required.ToString() #>)
#else
			/// <returns>
			/// An <see cref="System.IAsyncResult" /> for the pending asynchronous operation.
			/// </returns>
			public virtual IAsyncResult Begin<#= methodName #>(<#= required.ToString() #>)
#endif
			{
				var request = new RestRequest();
				request.Method = WebMethod.<#= method #>;
				request.Path = "<#= endpoint.Path #>";
				
				return _client.BeginRequest(request);
			}	
			
#if !WindowsPhone
			/// <summary>
			/// Completes an asynchronous request from '<#= endpoint.Path #>'.
			/// </summary>
			/// <returns>
			/// <see cref="<#= endpoint.Model #>" /> representing the results from '<#= endpoint.Path #>'.
			/// </returns>
			public virtual <#= endpoint.Model #> End<#= methodName #>(IAsyncResult result)
			{
				var request = new RestRequest();
				request.Method = WebMethod.<#= method #>;
				request.Path = "<#= endpoint.Path #>";
				
				var response = _client.EndRequest(result);
			  
			  	var model = JsonConvert.DeserializeObject<<#= endpoint.Model#>>(response.Content);
				
			    return model;
			}
#endif
<# } /* End of methods */ #>
<# } /* End of endpoints */ #>
<# } /* End of segments */ #>
<# if(def.Endpoints != null && def.Endpoints.Count() > 0) { 
			#> }
		<# } #>
	}
}
<# } /* End of definitions */ #>
